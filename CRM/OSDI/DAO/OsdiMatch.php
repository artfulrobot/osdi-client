<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from osdi/xml/schema/CRM/Osdi/OsdiMatch.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:fb306644b61a2cdcd695c86418f4ee9d)
 */
use \CRM_Osdi_ExtensionUtil as E;

/**
 * Database access object for the OsdiMatch entity.
 */
class CRM_Osdi_DAO_OsdiMatch extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_osdi_match';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique OsdiMatch ID
   *
   * @var int
   */
  public $id;

  /**
   * FK to Contact
   *
   * @var int
   */
  public $contact_id;

  /**
   * FK to OSDI Remote System
   *
   * @var int
   */
  public $remote_system_id;

  /**
   * FK to identifier field on remote system
   *
   * @var string
   */
  public $remote_person_id;

  /**
   * Modification date and time of the origin record as of the last sync, in UTC
   *
   * @var datetime
   */
  public $sync_origin_modified_time;

  /**
   * Modification date and time of the target record as of the last sync, in UTC
   *
   * @var datetime
   */
  public $sync_target_modified_time;

  /**
   * 0 if local CiviCRM was the origin of the last sync, 1 if remote system was the origin
   *
   * @var bool
   */
  public $sync_origin;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_osdi_match';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Osdi Matches') : E::ts('Osdi Match');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'contact_id', 'civicrm_contact', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'remote_system_id', 'civicrm_osdi_remote_system', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique OsdiMatch ID'),
          'required' => TRUE,
          'import' => TRUE,
          'where' => 'civicrm_osdi_match.id',
          'export' => TRUE,
          'table_name' => 'civicrm_osdi_match',
          'entity' => 'OsdiMatch',
          'bao' => 'CRM_Osdi_DAO_OsdiMatch',
          'localizable' => 0,
          'add' => NULL,
        ],
        'contact_id' => [
          'name' => 'contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Local Contact ID'),
          'description' => E::ts('FK to Contact'),
          'import' => TRUE,
          'where' => 'civicrm_osdi_match.contact_id',
          'export' => TRUE,
          'table_name' => 'civicrm_osdi_match',
          'entity' => 'OsdiMatch',
          'bao' => 'CRM_Osdi_DAO_OsdiMatch',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => NULL,
        ],
        'remote_system_id' => [
          'name' => 'remote_system_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Remote OSDI System ID'),
          'description' => E::ts('FK to OSDI Remote System'),
          'import' => TRUE,
          'where' => 'civicrm_osdi_match.remote_system_id',
          'export' => TRUE,
          'table_name' => 'civicrm_osdi_match',
          'entity' => 'OsdiMatch',
          'bao' => 'CRM_Osdi_DAO_OsdiMatch',
          'localizable' => 0,
          'FKClassName' => 'CRM_OSDI_DAO_RemoteSystem',
          'add' => NULL,
        ],
        'remote_person_id' => [
          'name' => 'remote_person_id',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Remote Person Identifier'),
          'description' => E::ts('FK to identifier field on remote system'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'import' => TRUE,
          'where' => 'civicrm_osdi_match.remote_person_id',
          'export' => TRUE,
          'default' => 'NULL',
          'table_name' => 'civicrm_osdi_match',
          'entity' => 'OsdiMatch',
          'bao' => 'CRM_Osdi_DAO_OsdiMatch',
          'localizable' => 0,
          'add' => NULL,
        ],
        'sync_origin_modified_time' => [
          'name' => 'sync_origin_modified_time',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Origin Last Synced Modification Time'),
          'description' => E::ts('Modification date and time of the origin record as of the last sync, in UTC'),
          'import' => TRUE,
          'where' => 'civicrm_osdi_match.sync_origin_modified_time',
          'export' => TRUE,
          'default' => 'NULL',
          'table_name' => 'civicrm_osdi_match',
          'entity' => 'OsdiMatch',
          'bao' => 'CRM_Osdi_DAO_OsdiMatch',
          'localizable' => 0,
          'add' => NULL,
        ],
        'sync_target_modified_time' => [
          'name' => 'sync_target_modified_time',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Target Last Synced Modification Time'),
          'description' => E::ts('Modification date and time of the target record as of the last sync, in UTC'),
          'import' => TRUE,
          'where' => 'civicrm_osdi_match.sync_target_modified_time',
          'export' => TRUE,
          'default' => 'NULL',
          'table_name' => 'civicrm_osdi_match',
          'entity' => 'OsdiMatch',
          'bao' => 'CRM_Osdi_DAO_OsdiMatch',
          'localizable' => 0,
          'add' => NULL,
        ],
        'sync_origin' => [
          'name' => 'sync_origin',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Origin of Last Sync'),
          'description' => E::ts('0 if local CiviCRM was the origin of the last sync, 1 if remote system was the origin'),
          'where' => 'civicrm_osdi_match.sync_origin',
          'default' => 'NULL',
          'table_name' => 'civicrm_osdi_match',
          'entity' => 'OsdiMatch',
          'bao' => 'CRM_Osdi_DAO_OsdiMatch',
          'localizable' => 0,
          'pseudoconstant' => [
            'callback' => 'CRM_OSDI_LinkageTracker::syncOriginPseudoConstant',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'osdi_match', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'osdi_match', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_contact_id' => [
        'name' => 'index_contact_id',
        'field' => [
          0 => 'contact_id',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_osdi_match::0::contact_id',
      ],
      'index_remote_system_id' => [
        'name' => 'index_remote_system_id',
        'field' => [
          0 => 'remote_system_id',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_osdi_match::0::remote_system_id',
      ],
      'index_remote_person_id' => [
        'name' => 'index_remote_person_id',
        'field' => [
          0 => 'remote_person_id',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_osdi_match::0::remote_person_id',
      ],
      'index_sync_origin_modified_time' => [
        'name' => 'index_sync_origin_modified_time',
        'field' => [
          0 => 'sync_origin_modified_time',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_osdi_match::0::sync_origin_modified_time',
      ],
      'index_sync_target_modified_time' => [
        'name' => 'index_sync_target_modified_time',
        'field' => [
          0 => 'sync_target_modified_time',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_osdi_match::0::sync_target_modified_time',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
